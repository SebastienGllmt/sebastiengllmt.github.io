{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","className","src","alt","width","height","href","controls","react_social_icons","url","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECsBNC,IAASC,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAgBH,EAAAC,EAAAC,cAjC/C,WACI,OACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,OAAKE,IAA8B,UAAWC,IAAI,GAAGC,MAAM,OAAOC,OAAO,SAA7E,kBACAP,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,kDAA6CF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,sBAAqBR,EAAAC,EAAAC,cAAA,OAAKE,IAA8B,cAAeC,IAAI,GAAGC,MAAM,OAAOC,OAAO,SAA1G,UAA7C,oBAA0LP,EAAAC,EAAAC,cAAA,KAAGM,KAAK,2BAA0BR,EAAAC,EAAAC,cAAA,OAAKE,IAA8B,eAAgBC,IAAI,GAAGC,MAAM,OAAOC,OAAO,SAAhH,WAA1L,0DACAP,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,SAAOE,IAA8B,uBAAwBK,UAAQ,IAAET,EAAAC,EAAAC,cAAA,WACvEF,EAAAC,EAAAC,cAAA,SAAOE,IAA8B,uBAAwBK,UAAQ,IACrET,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACQ,EAAA,WAAD,CAAYC,IAAI,sCAChBX,EAAAC,EAAAC,cAACQ,EAAA,WAAD,CAAYC,IAAI,sCAChBX,EAAAC,EAAAC,cAACQ,EAAA,WAAD,CAAYC,IAAI,iDAChBX,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACQ,EAAA,WAAD,CAAYC,IAAI,6DAChBX,EAAAC,EAAAC,cAACQ,EAAA,WAAD,CAAYC,IAAI,oCAkBuB,MAAgBX,EAAAC,EAAAC,cAb/D,WACI,OACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,qEACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGM,KAA+B,kCAAlC,YACJR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGM,KAA+B,mCAAlC,gEAM+C,OAAiBI,SAASC,eAAe,SDqFlG,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e054a8aa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { SocialIcon } from 'react-social-icons';\n\nfunction Introduction() {\n    return(\n    <div>\n        <h1><img src={process.env.PUBLIC_URL + \"/me.jpg\"} alt=\"\" width='75px' height='75px'/> Introduction </h1>\n        <p>My name is Sebastien Guillemot. </p>\n        <p>I work as an R&amp;D Engineering Lead for <a href=\"https://emurgo.io/\"><img src={process.env.PUBLIC_URL + \"/emurgo.png\"} alt=\"\" width='15px' height='15px'/>Emurgo</a> focusing on the <a href=\"https://www.cardano.org\"><img src={process.env.PUBLIC_URL + \"/cardano.png\"} alt=\"\" width='15px' height='15px'/>Cardano</a> project. I write code and create educational content.</p>\n        <h3> How to pronounce my name</h3>\n        <audio src={process.env.PUBLIC_URL + \"/audio/sebastien.mp3\"} controls/>< br/>\n        <audio src={process.env.PUBLIC_URL + \"/audio/guillemot.mp3\"} controls/>\n        <h2>Personal channels</h2>\n        <SocialIcon url=\"http://twitter.com/SebastienGllmt\" />\n        <SocialIcon url=\"https://github.com/SebastienGllmt\" />\n        <SocialIcon url=\"https://www.youtube.com/c/SebastienGuillemot\" />\n        <h2>Work channels</h2>\n        <SocialIcon url=\"https://www.youtube.com/channel/UCgFQ0hHuPO1QDcyP6t9KZTQ\" />\n        <SocialIcon url=\"https://medium.com/@emurgo_io\" />\n    </div>\n    );\n}\n\nfunction Notes() {\n    return(\n    <div>\n        <h1>Notes</h1>\n        <p>Check out some notes I took (embedded within the papers)</p>\n        <ul>\n            <li><a href={process.env.PUBLIC_URL + \"/papers/nipopows_annotated.pdf\"}>NiPoPoW</a></li>\n            <li><a href={process.env.PUBLIC_URL + \"/papers/incentive_annotated.pdf\"}>Reward Sharing Schemes for Stake Pools (Incentive Paper)</a></li>\n        </ul>\n    </div>\n    );\n}\n\nReactDOM.render(<div className='markdown-body'><Introduction /><Notes /></div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}